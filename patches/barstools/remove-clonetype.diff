diff --git a/src/main/scala/barstools/tapeout/transforms/utils/ProgrammaticBundle.scala b/src/main/scala/barstools/tapeout/transforms/utils/ProgrammaticBundle.scala
index 66200e6..ef98b29 100644
--- a/src/main/scala/barstools/tapeout/transforms/utils/ProgrammaticBundle.scala
+++ b/src/main/scala/barstools/tapeout/transforms/utils/ProgrammaticBundle.scala
@@ -8,7 +8,6 @@ class CustomBundle[T <: Data](elts: (String, T)*) extends Record {
   val elements = ListMap(elts.map { case (field, elt) => field -> chiselTypeOf(elt) }: _*)
   def apply(elt: String): T = elements(elt)
   def apply(elt: Int):    T = elements(elt.toString)
-  override def cloneType = (new CustomBundle(elements.toList: _*)).asInstanceOf[this.type]
 }
 
 class CustomIndexedBundle[T <: Data](elts: (Int, T)*) extends Record {
@@ -17,7 +16,6 @@ class CustomIndexedBundle[T <: Data](elts: (Int, T)*) extends Record {
   // TODO: Make an equivalent to the below work publicly (or only on subclasses?)
   def indexedElements = ListMap(elts.map { case (field, elt) => field -> chiselTypeOf(elt) }: _*)
   def apply(elt: Int): T = elements(elt.toString)
-  override def cloneType = (new CustomIndexedBundle(indexedElements.toList: _*)).asInstanceOf[this.type]
 }
 
 object CustomIndexedBundle {
